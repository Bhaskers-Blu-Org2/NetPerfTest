PS C:\DELETEME\Tools\ctstraffic> .\ctsTraffic.exe -help


ctsTraffic is a utility to generate and validate the integrity of network traffic. It is a client / server application with the ability to send and receive traffic in a variety of protocol patterns, utilizing a variety of API calling patterns. The protocol is validated in bytes sent and received for every connection established. Should there be any API failure, any connection lost prematurely, any protocol failure in bytes sent or received, the tool will capture and log that error information. Any errors will additionally cause ctsTraffic to return a non-zero error code.
Once started, ctrl-c or ctrl-break will cleanly shutdown the client or server


For issues or questions, please contact 'ctsSupport'


ctsTraffic -Help:[tcp] [udp] [logging] [advanced]
        - <default> == prints this usage statement
        - tcp : prints usage for TCP-specific options
        - udp : prints usage for UDP-specific options
        - logging : prints usage for logging options
        - advanced : prints the usage for advanced and experimental options


Server-side usage:
        ctsTraffic -Listen:<addr or *> [-Port:####] [-ServerExitLimit:<####>] [-Protocol:<tcp/udp>] [-Verify:####] [Protocol-specific options]

Client-side usage:
        ctsTraffic -Target:<addr or name> [-Port:####] [-Connections:<####>] [-Iterations:<####>] [-Protocol:<tcp/udp>] [-Verify:####] [Protocol-specific options]

The Server-side and Client-side may have fully independent settings *except* for the following:
 (these must match exactly between the client and the server)
        -Port
        -Protocol
        -Verify
        -Pattern (on TCP)
        -Transfer (on TCP)
        -BitsPerSecond (on UDP)
        -FrameRate (on UDP)
        -StreamLength (on UDP)


----------------------------------------------------------------------
                    Common Server-side options

  -Listen, -ServerExitLimit

----------------------------------------------------------------------
-Listen:<addr or *> [-Listen:<addr> -Listen:<addr>]
   - the specific IP Address for the server-side to listen, or '*' for all IP Addresses
        - <required>
          note : can specify multiple addresses by providing -Listen for each address
-ServerExitLimit:####
   - the total # of accepted connections before server gracefully exits
        - <default> == 0  (infinite)


----------------------------------------------------------------------
                    Common Client-side options

  -Connections, -Iterations, -Target

----------------------------------------------------------------------
-Connections:####
   - the total # of connections at any one time
        - <default> == 8  (there will always be 8 connections doing IO)
-Iterations:####
   - the number of times to iterate across the number of '-Connections'
        - <default> == 0  (infinite)
          note : the total # of connections to be made before exit == Iterations * Connections
-Target:<addr or name>
   - the server-side IP Address, FQDN, or hostname to connect
        - <required>
          note : given a FQDN or hostname, each new connection will iterate across
               : all IPv4 and IPv6 addresses which the name resolved
          note : one can specify '-Target:localhost' when client and server are both local
          note : one can specify multiple targets by providing -Target for each address or name


----------------------------------------------------------------------
                    Common options for all roles

  -Port, -Protocol, -Verify

----------------------------------------------------------------------
-Port:####
   - the port # the server will listen and the client will connect
        - <default> == 4444
-Protocol:<tcp,udp>
   - the protocol used for connectivity and IO
        - tcp : see -help:TCP for usage options
        - udp : see -help:UDP for usage options
-Verify:<connection,data>
   - an enumeration to indicate the level of integrity verification
        - <default> == data
        - connection : the integrity of every connection is verified
                     : including the precise # of bytes to send and receive
        - data : the integrity of every received data buffer is verified against the an expected bit-pattern
               : this validation is a superset of 'connection' integrity validation



For more information on command line options, specify -Help
ctsTraffic.exe -Help:[tcp] [udp] [logging] [advanced]
        - <default> == prints this usage statement
        - tcp : prints usage for TCP-specific options
        - udp : prints usage for UDP-specific options
        - logging : prints usage for logging options
        - advanced : prints the usage for advanced and experimental options










PS C:\DELETEME\Tools\ctstraffic> .\ctsTraffic.exe -help:tcp                                                                                                                                                            
----------------------------------------------------------------------
                    TCP-specific usage options

  -Buffer, -IO, -Pattern, -PullBytes, -PushBytes, -RateLimit,
  -Transfer

----------------------------------------------------------------------
-Buffer:#####
   - the # of bytes in the buffer used for each send/recv IO
        - <default> == 65536  (each send or recv will post a 64KB buffer)
        - supports range : [low,high]  (each connection will randomly choose a buffer size from within this range)
          note : Buffer is note required when -Pattern:MediaStream is specified,
               : FrameSize is the effective buffer size in that traffic pattern
-IO:<iocp,rioiocp>
   - the API set and usage for processing the protocol pattern
        - <default> == iocp
        - iocp : leverages WSARecv/WSASend using IOCP for async completions
        - rioiocp : registered i/o using an overlapped IOCP for completion notification
-Pattern:<push,pull,pushpull,duplex>
   - the protocol pattern to send & recv over the TCP connection
        - <default> == push
        - push : client pushes data to server
        - pull : client pulls data from server
        - pushpull : client/server alternates sending/receiving data
        - duplex : client/server sends and receives concurrently throughout the entire connection
-PullBytes:#####
   - applied only with -Pattern:PushPull - the number of bytes to 'pull'
        - <default> == 1048576 (1MB)
          note : pullbytes are the bytes received on the client and sent from the server
-PushBytes:#####
   - applied only with -Pattern:PushPull - the number of bytes to 'push'
        - <default> == 1048576 (1MB)
          note : pushbytes are the bytes sent from the client and received on the server
-RateLimit:#####
   - rate limits the number of bytes/sec being *sent* on each individual connection
        - <default> == 0 (no rate limits)
        - supports range : [low,high]  (each connection will randomly choose a rate limit setting from within this range)
-Transfer:#####
   - the total bytes to transfer per TCP connection
        - <default> == 1073741824  (each connection will transfer a sum total of 1GB)
        - supports range : [low,high]  (each connection will randomly choose a total transfer size send across)
          note : specifying a range *will* create failures (used to test TCP failures paths)
-Shutdown:<graceful,rude>
   - controls how clients terminate the TCP connection - note this is a client-only option
        - <default> == graceful
        - graceful : client will initiate a 4-way FIN with the server and wait for the server's FIN
        - rude : client will immediately close the connection once it receives the 'done' response from the server
         : this will deliberately tell TCP to linger for zero seconds and close the socket
         : this may reesult in a RST instead of a FIN



For more information on command line options, specify -Help
ctsTraffic.exe -Help:[tcp] [udp] [logging] [advanced]
        - <default> == prints this usage statement
        - tcp : prints usage for TCP-specific options
        - udp : prints usage for UDP-specific options
        - logging : prints usage for logging options
        - advanced : prints the usage for advanced and experimental options











PS C:\DELETEME\Tools\ctstraffic> .\ctsTraffic.exe -help:udp                                                                                                                                                            
----------------------------------------------------------------------
                    UDP-specific usage options

  * UDP datagrams are streamed in a controlled pattern
    similarly to audio/video streaming solutions
  * In all cases, the client-side receives and server-side sends
    at a fixed bit-rate and frame-size

  -BitsPerSecond, -FrameRate, -BufferDepth, -StreamLength,

----------------------------------------------------------------------
-BitsPerSecond:####
   - the number of bits per second to stream split across '-FrameRate' # of frames
        - <required>
-FrameRate:####
   - the number of frames per second being streamed
        - <required>
          note : for server-side this is the specific frequency that datagrams are sent
               : for client-side this is the frequency that frames are processed and verified
-BufferDepth:####
   - the number of seconds to buffer before processing the stream
        - <required>
          note : this affects the client-side buffering of frames
               : this also affects how far the client-side will peek at frames to resend if missing
               : the client will look ahead at 1/2 the buffer depth to request a resend if missing
-StreamLength:####
   - the total number of seconds to run the entire stream
        - <required>



For more information on command line options, specify -Help
ctsTraffic.exe -Help:[tcp] [udp] [logging] [advanced]
        - <default> == prints this usage statement
        - tcp : prints usage for TCP-specific options
        - udp : prints usage for UDP-specific options
        - logging : prints usage for logging options
        - advanced : prints the usage for advanced and experimental options










PS C:\DELETEME\Tools\ctstraffic> .\ctsTraffic.exe -help::logging                                                                                                                                                       

ctsTraffic is a utility to generate and validate the integrity of network traffic. It is a client / server application with the ability to send and receive traffic in a variety of protocol patterns, utilizing a variety of API calling patterns. The protocol is validated in bytes sent and received for every connection established. Should there be any API failure, any connection lost prematurely, any protocol failure in bytes sent or received, the tool will capture and log that error information. Any errors will additionally cause ctsTraffic to return a non-zero error code.
Once started, ctrl-c or ctrl-break will cleanly shutdown the client or server


For issues or questions, please contact 'ctsSupport'


ctsTraffic -Help:[tcp] [udp] [logging] [advanced]
        - <default> == prints this usage statement
        - tcp : prints usage for TCP-specific options
        - udp : prints usage for UDP-specific options
        - logging : prints usage for logging options
        - advanced : prints the usage for advanced and experimental options


Server-side usage:
        ctsTraffic -Listen:<addr or *> [-Port:####] [-ServerExitLimit:<####>] [-Protocol:<tcp/udp>] [-Verify:####] [Protocol-specific options]

Client-side usage:
        ctsTraffic -Target:<addr or name> [-Port:####] [-Connections:<####>] [-Iterations:<####>] [-Protocol:<tcp/udp>] [-Verify:####] [Protocol-specific options]

The Server-side and Client-side may have fully independent settings *except* for the following:
 (these must match exactly between the client and the server)
        -Port
        -Protocol
        -Verify
        -Pattern (on TCP)
        -Transfer (on TCP)
        -BitsPerSecond (on UDP)
        -FrameRate (on UDP)
        -StreamLength (on UDP)


----------------------------------------------------------------------
                    Common Server-side options

  -Listen, -ServerExitLimit

----------------------------------------------------------------------
-Listen:<addr or *> [-Listen:<addr> -Listen:<addr>]
   - the specific IP Address for the server-side to listen, or '*' for all IP Addresses
        - <required>
          note : can specify multiple addresses by providing -Listen for each address
-ServerExitLimit:####
   - the total # of accepted connections before server gracefully exits
        - <default> == 0  (infinite)


----------------------------------------------------------------------
                    Common Client-side options

  -Connections, -Iterations, -Target

----------------------------------------------------------------------
-Connections:####
   - the total # of connections at any one time
        - <default> == 8  (there will always be 8 connections doing IO)
-Iterations:####
   - the number of times to iterate across the number of '-Connections'
        - <default> == 0  (infinite)
          note : the total # of connections to be made before exit == Iterations * Connections
-Target:<addr or name>
   - the server-side IP Address, FQDN, or hostname to connect
        - <required>
          note : given a FQDN or hostname, each new connection will iterate across
               : all IPv4 and IPv6 addresses which the name resolved
          note : one can specify '-Target:localhost' when client and server are both local
          note : one can specify multiple targets by providing -Target for each address or name


----------------------------------------------------------------------
                    Common options for all roles

  -Port, -Protocol, -Verify

----------------------------------------------------------------------
-Port:####
   - the port # the server will listen and the client will connect
        - <default> == 4444
-Protocol:<tcp,udp>
   - the protocol used for connectivity and IO
        - tcp : see -help:TCP for usage options
        - udp : see -help:UDP for usage options
-Verify:<connection,data>
   - an enumeration to indicate the level of integrity verification
        - <default> == data
        - connection : the integrity of every connection is verified
                     : including the precise # of bytes to send and receive
        - data : the integrity of every received data buffer is verified against the an expected bit-pattern
               : this validation is a superset of 'connection' integrity validation



For more information on command line options, specify -Help
ctsTraffic.exe -Help:[tcp] [udp] [logging] [advanced]
        - <default> == prints this usage statement
        - tcp : prints usage for TCP-specific options
        - udp : prints usage for UDP-specific options
        - logging : prints usage for logging options
        - advanced : prints the usage for advanced and experimental options

